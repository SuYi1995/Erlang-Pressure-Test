%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0

-ifndef(pcligs).
-define(pcligs, true).

-define(pcligs_gpb_version, "4.4.0").

-ifndef('POSITION_PB_H').
-define('POSITION_PB_H', true).
-record('Position',
        {x = 0.0                :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 1
         y = 0.0                :: float() | integer() | infinity | '-infinity' | nan | undefined % = 2
        }).
-endif.

-ifndef('GAMELOGINREQ_PB_H').
-define('GAMELOGINREQ_PB_H', true).
-record('GameLoginReq',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         accessToken = []       :: iolist() | undefined, % = 2
         userInfoRawData = []   :: iolist() | undefined, % = 3
         signature = []         :: iolist() | undefined, % = 4
         referrerUid = 0        :: integer() | undefined % = 5, 32 bits
        }).
-endif.

-ifndef('GAMELOGINRES_PB_H').
-define('GAMELOGINRES_PB_H', true).
-record('GameLoginRes',
        {code = 'LG_OK'         :: 'LG_OK' | 'InternalErr' | 'InvalidToken' | 'InvalidSig' | 'UserAlreadyLogin' | integer() | undefined, % = 1, enum LoginErrorCode
         loginType = 'NORMAL'   :: 'NORMAL' | 'RECOVER' | integer() | undefined, % = 2, enum GameLoginType
         matchUserInfos = []    :: [pcligs:'MatchUserInfo'()] | undefined % = 3
        }).
-endif.

-ifndef('KICKOUTNOTIFY_PB_H').
-define('KICKOUTNOTIFY_PB_H', true).
-record('KickOutNotify',
        {reason = []            :: iolist() | undefined % = 1
        }).
-endif.

-ifndef('TEAMMEMBERINFOCHANGENOTIFY_PB_H').
-define('TEAMMEMBERINFOCHANGENOTIFY_PB_H', true).
-record('TeamMemberInfoChangeNotify',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         playerType = 0         :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('TEAMMEMBERINFO_PB_H').
-define('TEAMMEMBERINFO_PB_H', true).
-record('TeamMemberInfo',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         name = []              :: iolist() | undefined, % = 2
         gender = 0             :: integer() | undefined, % = 3, 32 bits
         avatar = []            :: iolist() | undefined, % = 4
         stars = 0              :: integer() | undefined, % = 5, 32 bits
         playerType = 0         :: integer() | undefined, % = 6, 32 bits
         ready = false          :: boolean() | 0 | 1 | undefined, % = 7
         positionIndex = 0      :: integer() | undefined % = 8, 32 bits
        }).
-endif.

-ifndef('TEAMINFO_PB_H').
-define('TEAMINFO_PB_H', true).
-record('TeamInfo',
        {teamID = 0             :: integer() | undefined, % = 1, 32 bits
         maxNum = 0             :: integer() | undefined, % = 2, 32 bits
         leaderid = 0           :: integer() | undefined, % = 3, 32 bits
         teamMembers = []       :: [pcligs:'TeamMemberInfo'()] | undefined, % = 4
         type = 'TEAMTYPE_RANK' :: 'TEAMTYPE_RANK' | 'TEAMTYPE_FRIEND' | integer() | undefined % = 5, enum TeamType
        }).
-endif.

-ifndef('CREATETEAMREQ_PB_H').
-define('CREATETEAMREQ_PB_H', true).
-record('CreateTeamReq',
        {type = 'TEAMTYPE_RANK' :: 'TEAMTYPE_RANK' | 'TEAMTYPE_FRIEND' | integer() | undefined % = 1, enum TeamType
        }).
-endif.

-ifndef('CREATETEAMRES_PB_H').
-define('CREATETEAMRES_PB_H', true).
-record('CreateTeamRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined, % = 1, enum BattleErrorCode
         info = undefined       :: pcligs:'TeamInfo'() | undefined % = 2
        }).
-endif.

-ifndef('JOINTEAMREQ_PB_H').
-define('JOINTEAMREQ_PB_H', true).
-record('JoinTeamReq',
        {teamID = 0             :: integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('JOINTEAMRES_PB_H').
-define('JOINTEAMRES_PB_H', true).
-record('JoinTeamRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined, % = 1, enum BattleErrorCode
         info = undefined       :: pcligs:'TeamInfo'() | undefined % = 2
        }).
-endif.

-ifndef('GETTEAMINFOREQ_PB_H').
-define('GETTEAMINFOREQ_PB_H', true).
-record('GetTeamInfoReq',
        {
        }).
-endif.

-ifndef('GETTEAMINFORES_PB_H').
-define('GETTEAMINFORES_PB_H', true).
-record('GetTeamInfoRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined, % = 1, enum BattleErrorCode
         info = undefined       :: pcligs:'TeamInfo'() | undefined % = 2
        }).
-endif.

-ifndef('LEAVETEAMREQ_PB_H').
-define('LEAVETEAMREQ_PB_H', true).
-record('LeaveTeamReq',
        {
        }).
-endif.

-ifndef('LEAVETEAMRES_PB_H').
-define('LEAVETEAMRES_PB_H', true).
-record('LeaveTeamRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('TEAMKICKPLAYERREQ_PB_H').
-define('TEAMKICKPLAYERREQ_PB_H', true).
-record('TeamKickPlayerReq',
        {uid = 0                :: integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('TEAMKICKPLAYERRES_PB_H').
-define('TEAMKICKPLAYERRES_PB_H', true).
-record('TeamKickPlayerRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('TEAMPLAYERREADYREQ_PB_H').
-define('TEAMPLAYERREADYREQ_PB_H', true).
-record('TeamPlayerReadyReq',
        {ready = false          :: boolean() | 0 | 1 | undefined % = 1
        }).
-endif.

-ifndef('TEAMPLAYERREADYRES_PB_H').
-define('TEAMPLAYERREADYRES_PB_H', true).
-record('TeamPlayerReadyRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('TEAMPLAYERREADYNOTIFY_PB_H').
-define('TEAMPLAYERREADYNOTIFY_PB_H', true).
-record('TeamPlayerReadyNotify',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         ready = false          :: boolean() | 0 | 1 | undefined % = 2
        }).
-endif.

-ifndef('PLAYERJOINTEAMNOTIFY_PB_H').
-define('PLAYERJOINTEAMNOTIFY_PB_H', true).
-record('PlayerJoinTeamNotify',
        {info = undefined       :: pcligs:'TeamMemberInfo'() | undefined % = 1
        }).
-endif.

-ifndef('PLAYERLEAVETEAMNOTIFY_PB_H').
-define('PLAYERLEAVETEAMNOTIFY_PB_H', true).
-record('PlayerLeaveTeamNotify',
        {playerID = 0           :: integer() | undefined, % = 1, 32 bits
         leaderID = 0           :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('MATCHUSERINFO_PB_H').
-define('MATCHUSERINFO_PB_H', true).
-record('MatchUserInfo',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         name = []              :: iolist() | undefined, % = 2
         gender = 0             :: integer() | undefined, % = 3, 32 bits
         avatar = []            :: iolist() | undefined, % = 4
         camp = 0               :: integer() | undefined, % = 5, 32 bits
         stars = 0              :: integer() | undefined % = 6, 32 bits
        }).
-endif.

-ifndef('MATCHSTARTREQ_PB_H').
-define('MATCHSTARTREQ_PB_H', true).
-record('MatchStartReq',
        {
        }).
-endif.

-ifndef('MATCHSTARTRES_PB_H').
-define('MATCHSTARTRES_PB_H', true).
-record('MatchStartRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('MATCHCANCELREQ_PB_H').
-define('MATCHCANCELREQ_PB_H', true).
-record('MatchCancelReq',
        {
        }).
-endif.

-ifndef('MATCHCANCELRES_PB_H').
-define('MATCHCANCELRES_PB_H', true).
-record('MatchCancelRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('MATCHRESULTNOTIFY_PB_H').
-define('MATCHRESULTNOTIFY_PB_H', true).
-record('MatchResultNotify',
        {matchUserInfos = []    :: [pcligs:'MatchUserInfo'()] | undefined % = 1
        }).
-endif.

-ifndef('MATCHSTARTNOTIFY_PB_H').
-define('MATCHSTARTNOTIFY_PB_H', true).
-record('MatchStartNotify',
        {
        }).
-endif.

-ifndef('MATCHCANCELNOTIFY_PB_H').
-define('MATCHCANCELNOTIFY_PB_H', true).
-record('MatchCancelNotify',
        {
        }).
-endif.

-ifndef('BATTLELOADCOMPLETEREPORT_PB_H').
-define('BATTLELOADCOMPLETEREPORT_PB_H', true).
-record('BattleLoadCompleteReport',
        {
        }).
-endif.

-ifndef('BATTLEPLAYER_PB_H').
-define('BATTLEPLAYER_PB_H', true).
-record('BattlePlayer',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         modelId = 0            :: non_neg_integer() | undefined, % = 2, 32 bits
         camp = 0               :: non_neg_integer() | undefined, % = 3, 32 bits
         playerRad = 0.0        :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 4
         position = undefined   :: pcligs:'Position'() | undefined, % = 5
         headFrameGoodsId = 0   :: non_neg_integer() | undefined, % = 6, 32 bits
         bulletModelId = 0      :: non_neg_integer() | undefined % = 7, 32 bits
        }).
-endif.

-ifndef('BATTLEPROP_PB_H').
-define('BATTLEPROP_PB_H', true).
-record('BattleProp',
        {id = 0                 :: integer() | undefined, % = 1, 32 bits
         propType = 0           :: non_neg_integer() | undefined, % = 2, 32 bits
         position = undefined   :: pcligs:'Position'() | undefined % = 3
        }).
-endif.

-ifndef('BATTLESTARTNOTIFY_PB_H').
-define('BATTLESTARTNOTIFY_PB_H', true).
-record('BattleStartNotify',
        {mapId = 0              :: integer() | undefined, % = 1, 32 bits
         timeInterval = 0       :: non_neg_integer() | undefined, % = 2, 32 bits
         players = []           :: [pcligs:'BattlePlayer'()] | undefined, % = 3
         props = []             :: [pcligs:'BattleProp'()] | undefined % = 4
        }).
-endif.

-ifndef('PLAYERMOVEINFO_PB_H').
-define('PLAYERMOVEINFO_PB_H', true).
-record('PlayerMoveInfo',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         playerRad = 0.0        :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 2
         state = 0              :: non_neg_integer() | undefined, % = 3, 32 bits
         position = undefined   :: pcligs:'Position'() | undefined, % = 4
         timestamp = 0          :: integer() | undefined % = 5, 32 bits
        }).
-endif.

-ifndef('PLAYERMOVEREQ_PB_H').
-define('PLAYERMOVEREQ_PB_H', true).
-record('PlayerMoveReq',
        {playerMoveInfo = undefined :: pcligs:'PlayerMoveInfo'() | undefined % = 1
        }).
-endif.

-ifndef('PLAYERMOVERES_PB_H').
-define('PLAYERMOVERES_PB_H', true).
-record('PlayerMoveRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined, % = 1, enum BattleErrorCode
         position = undefined   :: pcligs:'Position'() | undefined % = 2
        }).
-endif.

-ifndef('OTHERPLAYERMOVENOTIFY_PB_H').
-define('OTHERPLAYERMOVENOTIFY_PB_H', true).
-record('OtherPlayerMoveNotify',
        {playerMove = undefined :: pcligs:'PlayerMoveInfo'() | undefined % = 1
        }).
-endif.

-ifndef('ADJUSTPLAYERPOSTIONNOTIFY_PB_H').
-define('ADJUSTPLAYERPOSTIONNOTIFY_PB_H', true).
-record('AdjustPlayerPostionNotify',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         position = undefined   :: pcligs:'Position'() | undefined % = 2
        }).
-endif.

-ifndef('BATTLEPLAYERATTR_PB_H').
-define('BATTLEPLAYERATTR_PB_H', true).
-record('BattlePlayerAttr',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         fat = 0                :: non_neg_integer() | undefined, % = 2, 32 bits
         speed = 0              :: non_neg_integer() | undefined, % = 3, 32 bits
         experience = 0         :: non_neg_integer() | undefined, % = 4, 32 bits
         kill = 0               :: non_neg_integer() | undefined, % = 5, 32 bits
         death = 0              :: non_neg_integer() | undefined, % = 6, 32 bits
         assist = 0             :: non_neg_integer() | undefined % = 7, 32 bits
        }).
-endif.

-ifndef('RECOVERBATTLEPLAYERINFO_PB_H').
-define('RECOVERBATTLEPLAYERINFO_PB_H', true).
-record('RecoverBattlePlayerInfo',
        {baseInfo = undefined   :: pcligs:'BattlePlayer'() | undefined, % = 1
         attrInfo = undefined   :: pcligs:'BattlePlayerAttr'() | undefined % = 2
        }).
-endif.

-ifndef('GETRECOVERBATTLEINFOREQ_PB_H').
-define('GETRECOVERBATTLEINFOREQ_PB_H', true).
-record('GetRecoverBattleInfoReq',
        {
        }).
-endif.

-ifndef('GETRECOVERBATTLEINFORES_PB_H').
-define('GETRECOVERBATTLEINFORES_PB_H', true).
-record('GetRecoverBattleInfoRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined, % = 1, enum BattleErrorCode
         mapId = 0              :: integer() | undefined, % = 2, 32 bits
         timeInterval = 0       :: non_neg_integer() | undefined, % = 3, 32 bits
         camp1Score = 0         :: non_neg_integer() | undefined, % = 4, 32 bits
         camp2Score = 0         :: non_neg_integer() | undefined, % = 5, 32 bits
         players = []           :: [pcligs:'RecoverBattlePlayerInfo'()] | undefined, % = 6
         props = []             :: [pcligs:'BattleProp'()] | undefined % = 7
        }).
-endif.

-ifndef('ARENARANKREWARDSTATEREQ_PB_H').
-define('ARENARANKREWARDSTATEREQ_PB_H', true).
-record('ArenaRankRewardStateReq',
        {
        }).
-endif.

-ifndef('ARENARANKREWARDSTATERES_PB_H').
-define('ARENARANKREWARDSTATERES_PB_H', true).
-record('ArenaRankRewardStateRes',
        {receivedArenaRank = 0  :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('ARENAREWARDRECEIVEREQ_PB_H').
-define('ARENAREWARDRECEIVEREQ_PB_H', true).
-record('ArenaRewardReceiveReq',
        {arenaRank = 0          :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('ARENAREWARDRECEIVERES_PB_H').
-define('ARENAREWARDRECEIVERES_PB_H', true).
-record('ArenaRewardReceiveRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined, % = 1, enum BattleErrorCode
         receivedArenaRank = 0  :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('NETDELAYREQ_PB_H').
-define('NETDELAYREQ_PB_H', true).
-record('NetDelayReq',
        {
        }).
-endif.

-ifndef('NETDELAYRES_PB_H').
-define('NETDELAYRES_PB_H', true).
-record('NetDelayRes',
        {
        }).
-endif.

-ifndef('TEAMMEMBERCHANGEPOSITIONREQ_PB_H').
-define('TEAMMEMBERCHANGEPOSITIONREQ_PB_H', true).
-record('TeamMemberChangePositionReq',
        {positionIndex = 0      :: integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('TEAMMEMBERCHANGEPOSITIONRES_PB_H').
-define('TEAMMEMBERCHANGEPOSITIONRES_PB_H', true).
-record('TeamMemberChangePositionRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('TEAMMEMBERCHANGEPOSITIONNOTIFY_PB_H').
-define('TEAMMEMBERCHANGEPOSITIONNOTIFY_PB_H', true).
-record('TeamMemberChangePositionNotify',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         positionIndex = 0      :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('FRIENDBATTLESTARTREQ_PB_H').
-define('FRIENDBATTLESTARTREQ_PB_H', true).
-record('FriendBattleStartReq',
        {
        }).
-endif.

-ifndef('FRIENDBATTLESTARTRES_PB_H').
-define('FRIENDBATTLESTARTRES_PB_H', true).
-record('FriendBattleStartRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('BULLET_PB_H').
-define('BULLET_PB_H', true).
-record('Bullet',
        {id = 0                 :: integer() | undefined, % = 1, 32 bits
         type = 0               :: non_neg_integer() | undefined, % = 2, 32 bits
         modelID = 0            :: non_neg_integer() | undefined, % = 3, 32 bits
         ownerId = 0            :: integer() | undefined, % = 4, 32 bits
         startPos = undefined   :: pcligs:'Position'() | undefined % = 5
        }).
-endif.

-ifndef('BULLETHIT_PB_H').
-define('BULLETHIT_PB_H', true).
-record('BulletHit',
        {id = 0                 :: integer() | undefined, % = 1, 32 bits
         obstacleType = 0       :: non_neg_integer() | undefined, % = 2, 32 bits
         obstacleId = 0         :: integer() | undefined, % = 3, 32 bits
         bulletHitPos = undefined :: pcligs:'Position'() | undefined % = 4
        }).
-endif.

-ifndef('GAMEOVERPLAYERDATA_PB_H').
-define('GAMEOVERPLAYERDATA_PB_H', true).
-record('GameOverPlayerData',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         kill = 0               :: non_neg_integer() | undefined, % = 2, 32 bits
         death = 0              :: non_neg_integer() | undefined, % = 3, 32 bits
         assist = 0             :: non_neg_integer() | undefined, % = 4, 32 bits
         score = 0              :: non_neg_integer() | undefined, % = 5, 32 bits
         mvp = false            :: boolean() | 0 | 1 | undefined, % = 6
         starNum = 0            :: non_neg_integer() | undefined % = 7, 32 bits
        }).
-endif.

-ifndef('GAMEOVERCAMPDATA_PB_H').
-define('GAMEOVERCAMPDATA_PB_H', true).
-record('GameOverCampData',
        {win = false            :: boolean() | 0 | 1 | undefined, % = 1
         camp = 0               :: non_neg_integer() | undefined, % = 2, 32 bits
         playerData = []        :: [pcligs:'GameOverPlayerData'()] | undefined % = 3
        }).
-endif.

-ifndef('PLAYERATTACKREQ_PB_H').
-define('PLAYERATTACKREQ_PB_H', true).
-record('PlayerAttackReq',
        {attackStyle = 0        :: non_neg_integer() | undefined, % = 1, 32 bits
         playerRad = 0.0        :: float() | integer() | infinity | '-infinity' | nan | undefined % = 2
        }).
-endif.

-ifndef('PLAYERATTACKRES_PB_H').
-define('PLAYERATTACKRES_PB_H', true).
-record('PlayerAttackRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined, % = 1, enum BattleErrorCode
         playerRad = 0.0        :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 2
         attackStyle = 0        :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('PLAYERPICKPROPREQ_PB_H').
-define('PLAYERPICKPROPREQ_PB_H', true).
-record('PlayerPickPropReq',
        {id = 0                 :: integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('PLAYERPICKPROPRES_PB_H').
-define('PLAYERPICKPROPRES_PB_H', true).
-record('PlayerPickPropRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined, % = 1, enum BattleErrorCode
         id = 0                 :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('PLAYERSKILLCASTREQ_PB_H').
-define('PLAYERSKILLCASTREQ_PB_H', true).
-record('PlayerSkillCastReq',
        {skillId = 0            :: integer() | undefined, % = 1, 32 bits
         position = []          :: [pcligs:'Position'()] | undefined % = 2
        }).
-endif.

-ifndef('PLAYERSKILLCASTRES_PB_H').
-define('PLAYERSKILLCASTRES_PB_H', true).
-record('PlayerSkillCastRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined, % = 1, enum BattleErrorCode
         skillId = 0            :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('BULLETHITREQ_PB_H').
-define('BULLETHITREQ_PB_H', true).
-record('BulletHitReq',
        {bulletHit = undefined  :: pcligs:'BulletHit'() | undefined % = 1
        }).
-endif.

-ifndef('BULLETHITRES_PB_H').
-define('BULLETHITRES_PB_H', true).
-record('BulletHitRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('PLAYERCHATREQ_PB_H').
-define('PLAYERCHATREQ_PB_H', true).
-record('PlayerChatReq',
        {contentID = 0          :: non_neg_integer() | undefined, % = 1, 32 bits
         channel = 0            :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('PLAYERCHATRES_PB_H').
-define('PLAYERCHATRES_PB_H', true).
-record('PlayerChatRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('TIMESTAMPCORRECTIONREQ_PB_H').
-define('TIMESTAMPCORRECTIONREQ_PB_H', true).
-record('TimestampCorrectionReq',
        {clientTimestamp = 0    :: integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('TIMESTAMPCORRECTIONRES_PB_H').
-define('TIMESTAMPCORRECTIONRES_PB_H', true).
-record('TimestampCorrectionRes',
        {serverTimestamp = 0    :: integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('HEARTBEATREQ_PB_H').
-define('HEARTBEATREQ_PB_H', true).
-record('HeartBeatReq',
        {
        }).
-endif.

-ifndef('HEARTBEATRES_PB_H').
-define('HEARTBEATRES_PB_H', true).
-record('HeartBeatRes',
        {
        }).
-endif.

-ifndef('PLAYERHIDEREQ_PB_H').
-define('PLAYERHIDEREQ_PB_H', true).
-record('PlayerHideReq',
        {
        }).
-endif.

-ifndef('PLAYERHIDERES_PB_H').
-define('PLAYERHIDERES_PB_H', true).
-record('PlayerHideRes',
        {code = 'BT_OK'         :: 'BT_OK' | 'BT_UNKNOWN' | 'MATCH_CANCEL_MUST_IN_MATHING_STATE' | 'TEAM_CREATE_SUCCESS' | 'TEAM_ALREADY_IN_TEAM' | 'TEAM_NOT_TEAM_LEADER' | 'TEAM_NOT_IN_TEAM' | 'TEAM_IS_FULL' | 'TEAM_NOT_EXIST' | 'TEAM_ALREAY_START_BATTLE' | 'BATTLE_PLAYER_NOT_IN_BATTLE' | 'BATTLE_CHAT_IN_CD' | 'BATTLE_ATTACK_IN_CD' | 'BATTLE_NOT_IN_RECOVER_STATE' | 'ARENA_RANK_NOT_ENOUGH' | 'ARENA_RANK_REWARD_RECEIVED' | 'PLAYER_IN_ERROR_POSITION' | 'TEAM_KICK_PLAYER_FAILED' | 'TEAM_READY_FAILED' | 'TEAM_CANCEL_READY_FAILED' | 'MATCH_MUST_ALL_READY' | 'INVALID_PARAM' | 'PROP_NOT_EXIST' | 'PROP_PICKER_INVALID_POS' | 'INVALID_TEAM_POSITION' | 'TEAM_POSITION_HAVE_PALYER' | 'TEAM_START_PLAYERS_NUMBER_NOT_MATCH' | 'INVALID_TEAM_TYPE' | 'SKILL_IN_CD' | 'SKILL_ID_ERROR' | integer() | undefined % = 1, enum BattleErrorCode
        }).
-endif.

-ifndef('PLAYERATTACKNOTIFY_PB_H').
-define('PLAYERATTACKNOTIFY_PB_H', true).
-record('PlayerAttackNotify',
        {playerRad = 0.0        :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 1
         bullet = undefined     :: pcligs:'Bullet'() | undefined % = 2
        }).
-endif.

-ifndef('PLAYERKDACHANGENOTIFY_PB_H').
-define('PLAYERKDACHANGENOTIFY_PB_H', true).
-record('PlayerKDAChangeNotify',
        {kill = 0               :: non_neg_integer() | undefined, % = 1, 32 bits
         death = 0              :: non_neg_integer() | undefined, % = 2, 32 bits
         assist = 0             :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('PLAYERATTRINFO_PB_H').
-define('PLAYERATTRINFO_PB_H', true).
-record('PlayerAttrInfo',
        {fat = 0                :: non_neg_integer() | undefined, % = 1, 32 bits
         speed = 0              :: non_neg_integer() | undefined, % = 2, 32 bits
         experience = 0         :: non_neg_integer() | undefined, % = 3, 32 bits
         hide = false           :: boolean() | 0 | 1 | undefined % = 4
        }).
-endif.

-ifndef('PLAYERATTRCHANGENOTIFY_PB_H').
-define('PLAYERATTRCHANGENOTIFY_PB_H', true).
-record('PlayerAttrChangeNotify',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         playerAttrInfo = undefined :: pcligs:'PlayerAttrInfo'() | undefined % = 2
        }).
-endif.

-ifndef('PLAYERPICKPROPNOTIFY_PB_H').
-define('PLAYERPICKPROPNOTIFY_PB_H', true).
-record('PlayerPickPropNotify',
        {propId = 0             :: integer() | undefined, % = 1, 32 bits
         pickerId = 0           :: integer() | undefined, % = 2, 32 bits
         playerAttrInfo = undefined :: pcligs:'PlayerAttrInfo'() | undefined % = 3
        }).
-endif.

-ifndef('PLAYERBLINKNOTIFY_PB_H').
-define('PLAYERBLINKNOTIFY_PB_H', true).
-record('PlayerBlinkNotify',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         position = undefined   :: pcligs:'Position'() | undefined % = 2
        }).
-endif.

-ifndef('BULLETHITNOTIFY_PB_H').
-define('BULLETHITNOTIFY_PB_H', true).
-record('BulletHitNotify',
        {bulletHit = undefined  :: pcligs:'BulletHit'() | undefined, % = 1
         campScore1 = 0         :: non_neg_integer() | undefined, % = 2, 32 bits
         campScore2 = 0         :: non_neg_integer() | undefined, % = 3, 32 bits
         playerAttrInfo = undefined :: pcligs:'PlayerAttrInfo'() | undefined % = 4
        }).
-endif.

-ifndef('GENERATEPROPNOTIFY_PB_H').
-define('GENERATEPROPNOTIFY_PB_H', true).
-record('GeneratePropNotify',
        {props = []             :: [pcligs:'BattleProp'()] | undefined % = 1
        }).
-endif.

-ifndef('PLAYERREBORNNOTIFY_PB_H').
-define('PLAYERREBORNNOTIFY_PB_H', true).
-record('PlayerRebornNotify',
        {player = undefined     :: pcligs:'BattlePlayer'() | undefined % = 1
        }).
-endif.

-ifndef('PLAYERMUTIKILLNOTIFY_PB_H').
-define('PLAYERMUTIKILLNOTIFY_PB_H', true).
-record('PlayerMutiKillNotify',
        {killerUid = 0          :: integer() | undefined, % = 1, 32 bits
         killNum = 0            :: non_neg_integer() | undefined, % = 2, 32 bits
         deadUid = 0            :: integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('PLAYERCHATNOTIFY_PB_H').
-define('PLAYERCHATNOTIFY_PB_H', true).
-record('PlayerChatNotify',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         contentID = 0          :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('COUNTDOWNNOTIFY_PB_H').
-define('COUNTDOWNNOTIFY_PB_H', true).
-record('CountDownNotify',
        {time = 0               :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('GAMEOVERNOTIFY_PB_H').
-define('GAMEOVERNOTIFY_PB_H', true).
-record('GameOverNotify',
        {campData = []          :: [pcligs:'GameOverCampData'()] | undefined, % = 1
         type = 'TEAMTYPE_RANK' :: 'TEAMTYPE_RANK' | 'TEAMTYPE_FRIEND' | integer() | undefined % = 2, enum TeamType
        }).
-endif.

-ifndef('ENDLESSUSERITEM_PB_H').
-define('ENDLESSUSERITEM_PB_H', true).
-record('EndlessUserItem',
        {name = []              :: iolist() | undefined, % = 1
         headUrl = []           :: iolist() | undefined % = 2
        }).
-endif.

-ifndef('ENDLESSBEGINREQ_PB_H').
-define('ENDLESSBEGINREQ_PB_H', true).
-record('EndlessBeginReq',
        {isGetUserList = false  :: boolean() | 0 | 1 | undefined % = 1
        }).
-endif.

-ifndef('ENDLESSBEGINRES_PB_H').
-define('ENDLESSBEGINRES_PB_H', true).
-record('EndlessBeginRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         users = []             :: [pcligs:'EndlessUserItem'()] | undefined, % = 2
         todayBestName = []     :: iolist() | undefined, % = 3
         todayBestScore = 0     :: non_neg_integer() | undefined, % = 4, 32 bits
         useDoubleCardTimestamp = 0 :: non_neg_integer() | undefined % = 5, 32 bits
        }).
-endif.

-ifndef('ENDLESSENDREQ_PB_H').
-define('ENDLESSENDREQ_PB_H', true).
-record('EndlessEndReq',
        {endlessScore = 0       :: non_neg_integer() | undefined, % = 1, 32 bits
         killCount = 0          :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('ENDLESSENDRES_PB_H').
-define('ENDLESSENDRES_PB_H', true).
-record('EndlessEndRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         rankRate = 0           :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('ENDLESSCONTINUEREQ_PB_H').
-define('ENDLESSCONTINUEREQ_PB_H', true).
-record('EndlessContinueReq',
        {
        }).
-endif.

-ifndef('ENDLESSCONTINUERES_PB_H').
-define('ENDLESSCONTINUERES_PB_H', true).
-record('EndlessContinueRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined % = 1, enum LogicErrorCode
        }).
-endif.

-ifndef('USERBASEINFO_PB_H').
-define('USERBASEINFO_PB_H', true).
-record('UserBaseInfo',
        {uid = 0                :: integer() | undefined, % = 1, 32 bits
         headUrl = []           :: iolist() | undefined, % = 2
         name = []              :: iolist() | undefined, % = 3
         gender = 0             :: non_neg_integer() | undefined, % = 4, 32 bits
         currRoleType = 0       :: non_neg_integer() | undefined, % = 5, 32 bits
         currHeadFrameId = 0    :: non_neg_integer() | undefined, % = 6, 32 bits
         currBulletSkinId = 0   :: non_neg_integer() | undefined, % = 7, 32 bits
         starNum = 0            :: non_neg_integer() | undefined, % = 8, 32 bits
         endlessScore = 0       :: non_neg_integer() | undefined, % = 9, 32 bits
         diamond = 0            :: non_neg_integer() | undefined % = 10, 32 bits
        }).
-endif.

-ifndef('MYINFOREQ_PB_H').
-define('MYINFOREQ_PB_H', true).
-record('MyInfoReq',
        {
        }).
-endif.

-ifndef('MYINFORES_PB_H').
-define('MYINFORES_PB_H', true).
-record('MyInfoRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         info = undefined       :: pcligs:'UserBaseInfo'() | undefined % = 2
        }).
-endif.

-ifndef('RECORDINFOREQ_PB_H').
-define('RECORDINFOREQ_PB_H', true).
-record('RecordInfoReq',
        {
        }).
-endif.

-ifndef('RECORDINFORES_PB_H').
-define('RECORDINFORES_PB_H', true).
-record('RecordInfoRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         mvpCount = 0           :: non_neg_integer() | undefined, % = 2, 32 bits
         battleCount = 0        :: non_neg_integer() | undefined, % = 3, 32 bits
         winCount = 0           :: non_neg_integer() | undefined, % = 4, 32 bits
         evenKillCount = 0      :: non_neg_integer() | undefined, % = 5, 32 bits
         allKillCount = 0       :: non_neg_integer() | undefined, % = 6, 32 bits
         loginDay = 0           :: non_neg_integer() | undefined, % = 7, 32 bits
         starNum = 0            :: non_neg_integer() | undefined % = 8, 32 bits
        }).
-endif.

-ifndef('BAGITEM_PB_H').
-define('BAGITEM_PB_H', true).
-record('BagItem',
        {id = 0                 :: non_neg_integer() | undefined, % = 1, 32 bits
         num = 0                :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('BAGINFOREQ_PB_H').
-define('BAGINFOREQ_PB_H', true).
-record('BagInfoReq',
        {
        }).
-endif.

-ifndef('BAGINFORES_PB_H').
-define('BAGINFORES_PB_H', true).
-record('BagInfoRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         items = []             :: [pcligs:'BagItem'()] | undefined % = 2
        }).
-endif.

-ifndef('BAGUSEREQ_PB_H').
-define('BAGUSEREQ_PB_H', true).
-record('BagUseReq',
        {id = 0                 :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('BAGUSERES_PB_H').
-define('BAGUSERES_PB_H', true).
-record('BagUseRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         id = 0                 :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('BAGCANCELREQ_PB_H').
-define('BAGCANCELREQ_PB_H', true).
-record('BagCancelReq',
        {id = 0                 :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('BAGCANCELRES_PB_H').
-define('BAGCANCELRES_PB_H', true).
-record('BagCancelRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         id = 0                 :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('SHOPBUYREQ_PB_H').
-define('SHOPBUYREQ_PB_H', true).
-record('ShopBuyReq',
        {id = 0                 :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('SHOPBUYRES_PB_H').
-define('SHOPBUYRES_PB_H', true).
-record('ShopBuyRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         id = 0                 :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('ACHIEVEITEM_PB_H').
-define('ACHIEVEITEM_PB_H', true).
-record('AchieveItem',
        {type = 0               :: non_neg_integer() | undefined, % = 1, 32 bits
         finish = 0             :: non_neg_integer() | undefined, % = 2, 32 bits
         recvList = []          :: [non_neg_integer()] | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('ACHIEVEINFOREQ_PB_H').
-define('ACHIEVEINFOREQ_PB_H', true).
-record('AchieveInfoReq',
        {
        }).
-endif.

-ifndef('ACHIEVEINFORES_PB_H').
-define('ACHIEVEINFORES_PB_H', true).
-record('AchieveInfoRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         point = 0              :: non_neg_integer() | undefined, % = 2, 32 bits
         items = []             :: [pcligs:'AchieveItem'()] | undefined % = 3
        }).
-endif.

-ifndef('ACHIEVEREWARDREQ_PB_H').
-define('ACHIEVEREWARDREQ_PB_H', true).
-record('AchieveRewardReq',
        {id = 0                 :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('ACHIEVEREWARDRES_PB_H').
-define('ACHIEVEREWARDRES_PB_H', true).
-record('AchieveRewardRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         id = 0                 :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('SIGNINFOREQ_PB_H').
-define('SIGNINFOREQ_PB_H', true).
-record('SignInfoReq',
        {
        }).
-endif.

-ifndef('SIGNINFORES_PB_H').
-define('SIGNINFORES_PB_H', true).
-record('SignInfoRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         finishDays = 0         :: non_neg_integer() | undefined, % = 2, 32 bits
         isTodayFinish = false  :: boolean() | 0 | 1 | undefined % = 3
        }).
-endif.

-ifndef('SIGNTRYREQ_PB_H').
-define('SIGNTRYREQ_PB_H', true).
-record('SignTryReq',
        {type = 'COMMON'        :: 'COMMON' | 'AD' | integer() | undefined % = 1, enum EnumSignType
        }).
-endif.

-ifndef('SIGNTRYRES_PB_H').
-define('SIGNTRYRES_PB_H', true).
-record('SignTryRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         type = 'COMMON'        :: 'COMMON' | 'AD' | integer() | undefined % = 2, enum EnumSignType
        }).
-endif.

-ifndef('GIFTINFOREQ_PB_H').
-define('GIFTINFOREQ_PB_H', true).
-record('GiftInfoReq',
        {
        }).
-endif.

-ifndef('INVITEEITEM_PB_H').
-define('INVITEEITEM_PB_H', true).
-record('InviteeItem',
        {'InviteeID' = 0        :: integer() | undefined, % = 1, 32 bits
         'AvatarURL' = []       :: iolist() | undefined, % = 2
         'GiftReceived' = false :: boolean() | 0 | 1 | undefined % = 3
        }).
-endif.

-ifndef('GIFTINFORES_PB_H').
-define('GIFTINFORES_PB_H', true).
-record('GiftInfoRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         newbeeGiftReceived = false :: boolean() | 0 | 1 | undefined, % = 2
         inviteRecord = []      :: [pcligs:'InviteeItem'()] | undefined, % = 3
         secondDayGiftReceived = false :: boolean() | 0 | 1 | undefined, % = 4
         sceneGiftReceived = false :: boolean() | 0 | 1 | undefined, % = 5
         accountCreateTime = 0  :: integer() | undefined % = 6, 32 bits
        }).
-endif.

-ifndef('GIFTREWARDREQ_PB_H').
-define('GIFTREWARDREQ_PB_H', true).
-record('GiftRewardReq',
        {type = 'Newbee'        :: 'Newbee' | 'SecondDay' | 'Invite' | 'Scene' | integer() | undefined, % = 1, enum GiftType
         uid = 0                :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('GIFTREWARDRES_PB_H').
-define('GIFTREWARDRES_PB_H', true).
-record('GiftRewardRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         type = 'Newbee'        :: 'Newbee' | 'SecondDay' | 'Invite' | 'Scene' | integer() | undefined, % = 2, enum GiftType
         uid = 0                :: integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('WORLDRANKITEM_PB_H').
-define('WORLDRANKITEM_PB_H', true).
-record('WorldRankItem',
        {name = []              :: iolist() | undefined, % = 1
         score = 0              :: integer() | undefined, % = 2, 32 bits
         avatarURL = []         :: iolist() | undefined, % = 3
         gender = 0             :: non_neg_integer() | undefined, % = 4, 32 bits
         headFrameID = 0        :: non_neg_integer() | undefined, % = 5, 32 bits
         uid = 0                :: integer() | undefined % = 6, 32 bits
        }).
-endif.

-ifndef('WORLDRANKINFOREQ_PB_H').
-define('WORLDRANKINFOREQ_PB_H', true).
-record('WorldRankInfoReq',
        {mode = 'RANKING'       :: 'RANKING' | 'ENDLESS' | integer() | undefined % = 1, enum ENUM_RANK_MODE
        }).
-endif.

-ifndef('WORLDRANKINFORES_PB_H').
-define('WORLDRANKINFORES_PB_H', true).
-record('WorldRankInfoRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         mode = 'RANKING'       :: 'RANKING' | 'ENDLESS' | integer() | undefined, % = 2, enum ENUM_RANK_MODE
         items = []             :: [pcligs:'WorldRankItem'()] | undefined % = 3
        }).
-endif.

-ifndef('WECHATRUNDATAREQ_PB_H').
-define('WECHATRUNDATAREQ_PB_H', true).
-record('WechatRunDataReq',
        {encryptedData = []     :: iolist() | undefined, % = 1
         iv = []                :: iolist() | undefined % = 2
        }).
-endif.

-ifndef('WECHATRUNDATARES_PB_H').
-define('WECHATRUNDATARES_PB_H', true).
-record('WechatRunDataRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         walkStep = 0           :: non_neg_integer() | undefined, % = 2, 32 bits
         rewardStep = 0         :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('WECHATRUNREWARDREQ_PB_H').
-define('WECHATRUNREWARDREQ_PB_H', true).
-record('WechatRunRewardReq',
        {isDouble = false       :: boolean() | 0 | 1 | undefined % = 1
        }).
-endif.

-ifndef('WECHATRUNREWARDRES_PB_H').
-define('WECHATRUNREWARDRES_PB_H', true).
-record('WechatRunRewardRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined, % = 1, enum LogicErrorCode
         rewardDiamond = 0      :: non_neg_integer() | undefined, % = 2, 32 bits
         rewardStep = 0         :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('FREEDIAMONDADREQ_PB_H').
-define('FREEDIAMONDADREQ_PB_H', true).
-record('FreeDiamondAdReq',
        {
        }).
-endif.

-ifndef('FREEDIAMONDADRES_PB_H').
-define('FREEDIAMONDADRES_PB_H', true).
-record('FreeDiamondAdRes',
        {code = 'LC_OK'         :: 'LC_OK' | 'LC_UNKNOWN' | 'SHOP_ERROR_ID' | 'SHOP_LIMIT_DIAMOND' | 'SHOP_LIMIT_AMOUNT' | 'BAG_USE_ERROR_ID' | 'BAG_USE_LIMIT_AMOUNT' | 'BAG_CANCEL_ERROR_ID' | 'ACHIEVE_RECEIVED' | 'ACHIEVE_UNFINISH' | 'SIGN_TODAY_FINISH' | 'GIFT_RECEIVED' | 'GIFT_UNFINISH' | 'ENDLESS_END_UNKNOW' | 'ENDLESS_CONTINUE_LIMIT_DIAMOND' | integer() | undefined % = 1, enum LogicErrorCode
        }).
-endif.

-ifndef('GMCHANGEREPORT_PB_H').
-define('GMCHANGEREPORT_PB_H', true).
-record('GMChangeReport',
        {value = 0              :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-endif.
